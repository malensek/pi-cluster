#!/usr/bin/env bash
################################################################################
# provision-new - creates a brand new machine image from scratch.
################################################################################

source "$(cd "$(dirname "$0")" && pwd)/picle-functions.bash"

require bsdtar
require fdisk
require mkfs.f2fs
require mkfs.vfat
require wget

architecture="rpi-2"
hostname="raspberry-pi"
template=""
unset ip gw

################################################################################

print_usage() {
cat <<EOM
Usage: $(basename ${0}) [-h hostname] [-t template_file] target-device
Options:
    * -a architecture   CPU architecture (default: rpi-2)
                        Options:
                            rpi      (armv6): Model A, Model B 1/1+, Zero
                            rpi-2    (armv7/armv8): Model B 2 & 3
    * -h hostname       Specifies a hostname for the new host. Defaults to
                            'raspberry-pi'
    * -t template_file  A base file system tree to apply to the new host; see
                            'mktemplate' for creating templates.
EOM
}

while getopts "g:h:i:t:" flag; do
    case ${flag} in
        g) gw="${OPTARG}" ;;
        h) hostname="${OPTARG}" ;;
        i) ip="${OPTARG}" ;;
        t) template="${OPTARG}" ;;
        ?) print_usage; exit 1 ;;
    esac
done

shift $(($OPTIND - 1))

if [[ ${#} -lt 1 ]]; then
    print_usage
    exit 1
fi

dev="${1}"

[[ ! -e "${dev}" ]] && die "Device does not exist: ${dev}"
(mount | grep "${dev}" &> /dev/null) && die "Device is mounted! Unmount first."

[[ ! -z "${template}" && ! -e "${template}" ]] && \
    die "Template does not exist: ${template}"
[[ -z "${template}" ]] && \
    info_delay "Warning: No template image specified. Creating stock install."

info_delay "CPU Architecture: ${architecture}"

info_delay "Partitioning disk..."
cat <<EOM | fdisk "${dev}"
p
o
n
p
1

+100M
t
c
n
p
2


w
EOM

info_delay "Creating file systems..."

mkfs.vfat "${dev}1"
mkfs.f2fs "${dev}2"

info_delay "Mounting file systems..."
mkdir -v /var/tmp/boot
mkdir -v /var/tmp/root
mount -v "${dev}1" /var/tmp/boot
boot_ok=${?}
mount -v "${dev}2" /var/tmp/root
root_ok=${?}

if [[ "${boot_ok}" -ne 0 || "${root_ok}" -ne 0 ]]; then
    die "Failed to mount partitions!"
fi

info_delay "Retrieving latest arch linux image..."
os_image="http://archlinuxarm.org/os/ArchLinuxARM-${architecture}-latest.tar.gz"
wget \
    -N "${os_image}" \
    -P /var/tmp
if [[ $? -ne 0 ]]; then
    die "Could not download OS image: ${os_image}"
fi

info_delay "Creating root directory..."
bsdtar xvf /var/tmp/ArchLinuxARM-rpi-2-latest.tar.gz -C /var/tmp/root
sync
info_delay "Creating boot directory..."
mv -v /var/tmp/root/boot/* /var/tmp/boot

info_delay "Re-mounting boot into the root file system..."
umount -v /var/tmp/boot
mount -v "${dev}1" /var/tmp/root/boot

if [[ ! -z "${template}" ]]; then
    info_delay "Applying template image..."
    tar xvf "${template}" -C /var/tmp/root
fi

info_delay "Setting hostname: ${hostname}"
echo "${hostname}" > /var/tmp/root/etc/hostname

if [[ -z "${ip}" || -z "${gw}" ]]; then
    info_delay "No IP/gateway specified. Using DHCP."
    #TODO force DHCP config here
else
info_delay "Configuring network:"
echo "IP: ${ip}"
echo "Gateway: ${gw}"
cat > /var/tmp/root/etc/systemd/network/eth0.network <<EOM
[Match]
Name=eth0

[Network]
Address=${ip}
Gateway=${gw}
EOM
fi


info_delay "Unmounting file systems..."
umount -v /var/tmp/root/boot
umount -v /var/tmp/root
